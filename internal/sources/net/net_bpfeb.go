// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package net

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadNet returns the embedded CollectionSpec for net.
func loadNet() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_NetBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load net: %w", err)
	}

	return spec, err
}

// loadNetObjects loads net and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*netObjects
//	*netPrograms
//	*netMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadNetObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadNet()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// netSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type netSpecs struct {
	netProgramSpecs
	netMapSpecs
	netVariableSpecs
}

// netProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type netProgramSpecs struct {
	SockConnect4 *ebpf.ProgramSpec `ebpf:"sock_connect4"`
}

// netMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type netMapSpecs struct {
	Connections *ebpf.MapSpec `ebpf:"connections"`
}

// netVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type netVariableSpecs struct {
}

// netObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadNetObjects or ebpf.CollectionSpec.LoadAndAssign.
type netObjects struct {
	netPrograms
	netMaps
	netVariables
}

func (o *netObjects) Close() error {
	return _NetClose(
		&o.netPrograms,
		&o.netMaps,
	)
}

// netMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadNetObjects or ebpf.CollectionSpec.LoadAndAssign.
type netMaps struct {
	Connections *ebpf.Map `ebpf:"connections"`
}

func (m *netMaps) Close() error {
	return _NetClose(
		m.Connections,
	)
}

// netVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadNetObjects or ebpf.CollectionSpec.LoadAndAssign.
type netVariables struct {
}

// netPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadNetObjects or ebpf.CollectionSpec.LoadAndAssign.
type netPrograms struct {
	SockConnect4 *ebpf.Program `ebpf:"sock_connect4"`
}

func (p *netPrograms) Close() error {
	return _NetClose(
		p.SockConnect4,
	)
}

func _NetClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed net_bpfeb.o
var _NetBytes []byte
