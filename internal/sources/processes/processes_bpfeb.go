// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package processes

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadProcesses returns the embedded CollectionSpec for processes.
func loadProcesses() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ProcessesBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load processes: %w", err)
	}

	return spec, err
}

// loadProcessesObjects loads processes and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*processesObjects
//	*processesPrograms
//	*processesMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadProcessesObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadProcesses()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// processesSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type processesSpecs struct {
	processesProgramSpecs
	processesMapSpecs
	processesVariableSpecs
}

// processesProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type processesProgramSpecs struct {
	SyscallEnterExecve *ebpf.ProgramSpec `ebpf:"syscall_enter_execve"`
	SyscallExitFork    *ebpf.ProgramSpec `ebpf:"syscall_exit_fork"`
}

// processesMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type processesMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// processesVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type processesVariableSpecs struct {
}

// processesObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadProcessesObjects or ebpf.CollectionSpec.LoadAndAssign.
type processesObjects struct {
	processesPrograms
	processesMaps
	processesVariables
}

func (o *processesObjects) Close() error {
	return _ProcessesClose(
		&o.processesPrograms,
		&o.processesMaps,
	)
}

// processesMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadProcessesObjects or ebpf.CollectionSpec.LoadAndAssign.
type processesMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *processesMaps) Close() error {
	return _ProcessesClose(
		m.Events,
	)
}

// processesVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadProcessesObjects or ebpf.CollectionSpec.LoadAndAssign.
type processesVariables struct {
}

// processesPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadProcessesObjects or ebpf.CollectionSpec.LoadAndAssign.
type processesPrograms struct {
	SyscallEnterExecve *ebpf.Program `ebpf:"syscall_enter_execve"`
	SyscallExitFork    *ebpf.Program `ebpf:"syscall_exit_fork"`
}

func (p *processesPrograms) Close() error {
	return _ProcessesClose(
		p.SyscallEnterExecve,
		p.SyscallExitFork,
	)
}

func _ProcessesClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed processes_bpfeb.o
var _ProcessesBytes []byte
